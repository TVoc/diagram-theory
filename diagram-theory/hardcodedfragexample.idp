include<LTC>

LTCvocabulary V {
    type Time isa nat
    Start: Time
    partial Next(Time) : Time
    
    type SDPoint constructed from { finished, fragexample_1, fragexample_10, fragexample_2, fragexample_3, fragexample_4, fragexample_5, fragexample_6, fragexample_7, fragexample_8, fragexample_9 }
    partial NextSD(SDPoint) : SDPoint
    
    SDPointAt(Time,SDPoint)
    I_SDPointAt(SDPoint)
    C_SDPointAt(Time,SDPoint)
    
    type LimitedInt isa int
    type LimitedFloat isa float
    type LimitedString isa string
    type boolean constructed from { T, F }
    flipBool(boolean) : boolean
    type void constructed from { null }
    type StackLevel = { 1..10 } isa nat
    
    CurrentStackLevel(Time) : StackLevel
    I_CurrentStackLevel : StackLevel
    C_CurrentStackLevel(Time,StackLevel)
    
    ReturnPoint(Time,StackLevel,SDPoint)
    I_ReturnPoint(StackLevel,SDPoint)
    C_ReturnPoint(Time,StackLevel,SDPoint)
    Cn_ReturnPoint(Time,StackLevel,SDPoint)
    
    RandomInt(Time) : LimitedInt
    type A
    
    Alt1aT(Time, StackLevel, boolean)
    I_Alt1aT(StackLevel, boolean)
    C_Alt1aT(Time, StackLevel, boolean)
    
    Alt2bT(Time, StackLevel, boolean)
    I_Alt2bT(StackLevel, boolean)
    C_Alt2bT(Time, StackLevel, boolean)
    
    AT(Time, StackLevel, A)
    I_AT(StackLevel, A)
    C_AT(Time, StackLevel, A)
    
    Alt2aT(Time, StackLevel, boolean)
    I_Alt2aT(StackLevel, boolean)
    C_Alt2aT(Time, StackLevel, boolean)
    
    Alt1bT(Time, StackLevel, boolean)
    I_Alt1bT(StackLevel, boolean)
    C_Alt1bT(Time, StackLevel, boolean)
    
    Loop4T(Time, StackLevel, boolean)
    I_Loop4T(StackLevel, boolean)
    C_Loop4T(Time, StackLevel, boolean)
    
    Loop2T(Time, StackLevel, boolean)
    I_Loop2T(StackLevel, boolean)
    C_Loop2T(Time, StackLevel, boolean)
    
    Loop3T(Time, StackLevel, boolean)
    I_Loop3T(StackLevel, boolean)
    C_Loop3T(Time, StackLevel, boolean)
    
    Loop1T(Time, StackLevel, boolean)
    I_Loop1T(StackLevel, boolean)
    C_Loop1T(Time, StackLevel, boolean)
    
}
theory T:V {
    {
        ! t [Time] s [SDPoint] : C_SDPointAt(Next(t), NextSD(s)) <- SDPointAt(t, s)& ~((s = finished) | (s = fragexample_1) | (s = fragexample_2) | (s = fragexample_4) | (s = fragexample_5) | (s = fragexample_6) | (s = fragexample_7) | (s = fragexample_8) | (s = fragexample_9) | (s = fragexample_10)).
        
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_2) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_9) | SDPointAt(t, fragexample_1)) & ( ? loop1 [boolean] : Loop1T(Next(t), st, loop1) & (loop1=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_3) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_2) & ( ? alt1a [boolean] : Alt1aT(Next(t), st, alt1a) & (alt1a=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_5) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_2) & ( ? alt1b [boolean] : Alt1bT(Next(t), st, alt1b) & (alt1b=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_6) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_7) | SDPointAt(t, fragexample_6)) & ( ? loop3 [boolean] alt2a [boolean] : Loop3T(Next(t), st, loop3) & Alt2aT(Next(t), st, alt2a) & (loop3=T) & (alt2a=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_6) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_5) | SDPointAt(t, fragexample_4)) & ( ? loop2 [boolean] loop3 [boolean] alt2a [boolean] : Loop2T(Next(t), st, loop2) & Loop3T(Next(t), st, loop3) & Alt2aT(Next(t), st, alt2a) & (loop2=T) & (loop3=T) & (alt2a=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_6) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_8) & ( ? loop4 [boolean] loop2 [boolean] loop3 [boolean] alt2a [boolean] : Loop4T(Next(t), st, loop4) & Loop2T(Next(t), st, loop2) & Loop3T(Next(t), st, loop3) & Alt2aT(Next(t), st, alt2a) & ~(loop4=T) & (loop2=T) & (loop3=T) & (alt2a=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_7) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_7) | SDPointAt(t, fragexample_6)) & ( ? loop3 [boolean] alt2b [boolean] : Loop3T(Next(t), st, loop3) & Alt2bT(Next(t), st, alt2b) & (loop3=T) & (alt2b=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_7) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_5) | SDPointAt(t, fragexample_4)) & ( ? loop2 [boolean] loop3 [boolean] alt2b [boolean] : Loop2T(Next(t), st, loop2) & Loop3T(Next(t), st, loop3) & Alt2bT(Next(t), st, alt2b) & (loop2=T) & (loop3=T) & (alt2b=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_7) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_8) & ( ? loop4 [boolean] loop2 [boolean] loop3 [boolean] alt2b [boolean] : Loop4T(Next(t), st, loop4) & Loop2T(Next(t), st, loop2) & Loop3T(Next(t), st, loop3) & Alt2bT(Next(t), st, alt2b) & ~(loop4=T) & (loop2=T) & (loop3=T) & (alt2b=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_8) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_5) | SDPointAt(t, fragexample_4)) & ( ? loop2 [boolean] loop3 [boolean] loop4 [boolean] : Loop2T(Next(t), st, loop2) & Loop3T(Next(t), st, loop3) & Loop4T(Next(t), st, loop4) & (loop2=T) & ~(loop3=T) & (loop4=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_8) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_7) | SDPointAt(t, fragexample_6)) & ( ? loop4 [boolean] loop3 [boolean] : Loop4T(Next(t), st, loop4) & Loop3T(Next(t), st, loop3) & (loop4=T) & ~(loop3=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_8) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_8) & ( ? loop4 [boolean] : Loop4T(Next(t), st, loop4) & (loop4=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_9) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_5) | SDPointAt(t, fragexample_4)) & ( ? loop2 [boolean] : Loop2T(Next(t), st, loop2) & ~(loop2=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_9) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_8) & ( ? loop4 [boolean] loop2 [boolean] : Loop4T(Next(t), st, loop4) & Loop2T(Next(t), st, loop2) & ~(loop4=T) & ~(loop2=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_9) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_7) | SDPointAt(t, fragexample_6)) & ( ? loop3 [boolean] loop4 [boolean] loop2 [boolean] : Loop3T(Next(t), st, loop3) & Loop4T(Next(t), st, loop4) & Loop2T(Next(t), st, loop2) & ~(loop3=T) & ~(loop4=T) & ~(loop2=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_10) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_9) | SDPointAt(t, fragexample_1)) & ( ? loop1 [boolean] : Loop1T(Next(t), st, loop1) & ~(loop1=T)).
        
        ! t [Time] s [SDPoint] : C_SDPointAt(Next(t), s) <- ReturnPoint(t, CurrentStackLevel(t), s) & (SDPointAt(t, fragexample_10) | SDPointAt(t, fragexample_2)).
        ! t [Time] st [StackLevel] sd [SDPoint] : Cn_ReturnPoint(Next(t), st, sd) <- (CurrentStackLevel(t) = st) & ReturnPoint(t, st, sd) & (SDPointAt(t, fragexample_2) | SDPointAt(t, fragexample_10)).
        
    }
    {
            ! s [SDPoint] : SDPointAt(Start, s) <- I_SDPointAt(s).
            ! t [Time] s [SDPoint] : SDPointAt(Next(t), s) <- C_SDPointAt(Next(t), s).
            ! t [Time] s [SDPoint] : SDPointAt(Next(t), s) <- SDPointAt(t, s) & ~(? s1 [SDPoint] : C_SDPointAt(Next(t), s1)).
            
            ! st [StackLevel] : CurrentStackLevel(Start) = st <- I_CurrentStackLevel = st.
            ! t [Time] st [StackLevel] : CurrentStackLevel(t) = st <- C_CurrentStackLevel(t, st).
            ! t [Time] st [StackLevel] : CurrentStackLevel(Next(t)) = st <- CurrentStackLevel(t) = st & ~(? st1 [StackLevel] : C_CurrentStackLevel(Next(t), st1)).
            
            ! st [StackLevel] sd [SDPoint] : ReturnPoint(Start, st, sd) <- I_ReturnPoint(st, sd).
            ! t [Time] st [StackLevel] sd [SDPoint] : ReturnPoint(t, st, sd) <- C_ReturnPoint(t, st, sd).
            ! t [Time] st [StackLevel] sd [SDPoint] : ReturnPoint(Next(t), st, sd) <- ReturnPoint(t, st, sd) & ~Cn_ReturnPoint(Next(t), st, sd).
            
            ! x [boolean] st [StackLevel] : Alt1aT(Start, st, x) <- I_Alt1aT(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Alt1aT(t, st, x) <- C_Alt1aT(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Alt1aT(Next(t), st, x) <- Alt1aT(t, st, x) & ~( ? x1 [boolean] : C_Alt1aT(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Alt2bT(Start, st, x) <- I_Alt2bT(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Alt2bT(t, st, x) <- C_Alt2bT(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Alt2bT(Next(t), st, x) <- Alt2bT(t, st, x) & ~( ? x1 [boolean] : C_Alt2bT(Next(t), st, x1) & ~(x = x1)).
            
            ! x [A] st [StackLevel] : AT(Start, st, x) <- I_AT(st, x).
            ! t [Time] st [StackLevel] x [A] : AT(t, st, x) <- C_AT(t, st, x).
            ! t [Time] st [StackLevel] x [A] : AT(Next(t), st, x) <- AT(t, st, x) & ~( ? x1 [A] : C_AT(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Alt2aT(Start, st, x) <- I_Alt2aT(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Alt2aT(t, st, x) <- C_Alt2aT(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Alt2aT(Next(t), st, x) <- Alt2aT(t, st, x) & ~( ? x1 [boolean] : C_Alt2aT(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Alt1bT(Start, st, x) <- I_Alt1bT(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Alt1bT(t, st, x) <- C_Alt1bT(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Alt1bT(Next(t), st, x) <- Alt1bT(t, st, x) & ~( ? x1 [boolean] : C_Alt1bT(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Loop4T(Start, st, x) <- I_Loop4T(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop4T(t, st, x) <- C_Loop4T(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop4T(Next(t), st, x) <- Loop4T(t, st, x) & ~( ? x1 [boolean] : C_Loop4T(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Loop2T(Start, st, x) <- I_Loop2T(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop2T(t, st, x) <- C_Loop2T(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop2T(Next(t), st, x) <- Loop2T(t, st, x) & ~( ? x1 [boolean] : C_Loop2T(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Loop3T(Start, st, x) <- I_Loop3T(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop3T(t, st, x) <- C_Loop3T(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop3T(Next(t), st, x) <- Loop3T(t, st, x) & ~( ? x1 [boolean] : C_Loop3T(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Loop1T(Start, st, x) <- I_Loop1T(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1T(t, st, x) <- C_Loop1T(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1T(Next(t), st, x) <- Loop1T(t, st, x) & ~( ? x1 [boolean] : C_Loop1T(Next(t), st, x1) & ~(x = x1)).
            
            
    }
    {
    }


}
structure S:V {
    Time = { 0..20 }
    Start = 0
    Next = { 0->1; 1->2; 2->3; 3->4; 4->5; 5->6; 6->7; 7->8; 8->9; 9->10; 10->11; 11->12; 12->13; 13->14; 14->15; 15->16; 16->17; 17->18; 18->19; 19->20 }

    I_CurrentStackLevel = 1

    LimitedInt = { -5..5 }
    RandomInt = { 0,-2; 1,4; 2,1; 3,5; 4,-2; 5,-3; 6,-4; 7,-2; 8,4; 9,5; 10,-4; 11,-1; 12,-5; 13,-3; 14,-4; 15,5; 16,4; 17,4; 18,-3; 19,-4; 20,0 }
    LimitedFloat = { 0.0; 0.5; -0.5; 0.5; -0.5; 0.5; -0.5; 0.5; -0.5}
    LimitedString = { "mGmFZtrX9QC2dqig791O"; "0l57IjTUiIZA11bHlprb"; "zA6A3H923BSQAtIxNZsM"; "alt1a"; "alt2b"; "a"; "alt2a"; "alt1b"; "loop4"; "loop2"; "loop3"; "loop1"} 
    
    A = { A1; A2; A3}
    NextSD = { fragexample_1->fragexample_2; fragexample_2->fragexample_3; fragexample_3->fragexample_4; fragexample_4->fragexample_5; fragexample_5->fragexample_6; fragexample_6->fragexample_7; fragexample_7->fragexample_8; fragexample_8->fragexample_9; fragexample_9->fragexample_10; fragexample_10->fragexample_1; fragexample_1->fragexample_2 }
    flipBool = { T->F;F->T}
}
procedure main() {
    print(modelexpand(T,S)[1])
}