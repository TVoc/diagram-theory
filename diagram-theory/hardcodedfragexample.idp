include<LTC>

LTCvocabulary V {
    type Time isa nat
    Start: Time
    partial Next(Time) : Time
    
    type SDPoint constructed from { finished, fragexample_1, fragexample_10, fragexample_2, fragexample_3, fragexample_4, fragexample_5, fragexample_6, fragexample_7, fragexample_8, fragexample_9 }
    partial NextSD(SDPoint) : SDPoint
    
    SDPointAt(Time,SDPoint)
    I_SDPointAt(SDPoint)
    C_SDPointAt(Time,SDPoint)
    
    type LimitedInt isa int
    type LimitedFloat isa float
    type LimitedString isa string
    type boolean constructed from { T, F }
    flipBool(boolean) : boolean
    type void constructed from { null }
    type StackLevel = { 1..10 } isa nat
    
    CurrentStackLevel(Time) : StackLevel
    I_CurrentStackLevel : StackLevel
    C_CurrentStackLevel(Time,StackLevel)
    
    ReturnPoint(Time,StackLevel,SDPoint)
    I_ReturnPoint(StackLevel,SDPoint)
    C_ReturnPoint(Time,StackLevel,SDPoint)
    Cn_ReturnPoint(Time,StackLevel,SDPoint)
    
    RandomInt(Time) : LimitedInt
    type A
    
    Loop1alt1ifT(Time, StackLevel, boolean)
    I_Loop1alt1ifT(StackLevel, boolean)
    C_Loop1alt1ifT(Time, StackLevel, boolean)
    
    AT(Time, StackLevel, A)
    I_AT(StackLevel, A)
    C_AT(Time, StackLevel, A)
    
    Loop1loop1loop1alt1ifT(Time, StackLevel, boolean)
    I_Loop1loop1loop1alt1ifT(StackLevel, boolean)
    C_Loop1loop1loop1alt1ifT(Time, StackLevel, boolean)
    
    Loop1loop1T(Time, StackLevel, boolean)
    I_Loop1loop1T(StackLevel, boolean)
    C_Loop1loop1T(Time, StackLevel, boolean)
    
    Loop1T(Time, StackLevel, boolean)
    I_Loop1T(StackLevel, boolean)
    C_Loop1T(Time, StackLevel, boolean)
    
    Loop1loop1loop1alt1thenT(Time, StackLevel, boolean)
    I_Loop1loop1loop1alt1thenT(StackLevel, boolean)
    C_Loop1loop1loop1alt1thenT(Time, StackLevel, boolean)
    
    Loop1loop1loop1T(Time, StackLevel, boolean)
    I_Loop1loop1loop1T(StackLevel, boolean)
    C_Loop1loop1loop1T(Time, StackLevel, boolean)
    
    Loop1alt1thenT(Time, StackLevel, boolean)
    I_Loop1alt1thenT(StackLevel, boolean)
    C_Loop1alt1thenT(Time, StackLevel, boolean)
    
    Loop1loop1loop2T(Time, StackLevel, boolean)
    I_Loop1loop1loop2T(StackLevel, boolean)
    C_Loop1loop1loop2T(Time, StackLevel, boolean)
    
}
theory T:V {
    {
        ! t [Time] s [SDPoint] : C_SDPointAt(Next(t), NextSD(s)) <- SDPointAt(t, s)& ~((s = finished) | (s = fragexample_1) | (s = fragexample_2) | (s = fragexample_4) | (s = fragexample_5) | (s = fragexample_6) | (s = fragexample_7) | (s = fragexample_8) | (s = fragexample_9) | (s = fragexample_10)).
        
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_2) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_9) | SDPointAt(t, fragexample_1)) & ( ? loop1 [boolean] : Loop1T(Next(t), st, loop1) & (loop1=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_3) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_2) & ( ? loop1alt1if [boolean] : Loop1alt1ifT(Next(t), st, loop1alt1if) & (loop1alt1if=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_5) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_2) & ( ? loop1alt1then [boolean] : Loop1alt1thenT(Next(t), st, loop1alt1then) & (loop1alt1then=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_6) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_7) | SDPointAt(t, fragexample_6)) & ( ? loop1loop1loop1 [boolean] loop1loop1loop1alt1if [boolean] : Loop1loop1loop1T(Next(t), st, loop1loop1loop1) & Loop1loop1loop1alt1ifT(Next(t), st, loop1loop1loop1alt1if) & (loop1loop1loop1=T) & (loop1loop1loop1alt1if=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_6) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_8) & ( ? loop1loop1loop2 [boolean] loop1loop1 [boolean] loop1loop1loop1 [boolean] loop1loop1loop1alt1if [boolean] : Loop1loop1loop2T(Next(t), st, loop1loop1loop2) & Loop1loop1T(Next(t), st, loop1loop1) & Loop1loop1loop1T(Next(t), st, loop1loop1loop1) & Loop1loop1loop1alt1ifT(Next(t), st, loop1loop1loop1alt1if) & ~(loop1loop1loop2=T) & (loop1loop1=T) & (loop1loop1loop1=T) & (loop1loop1loop1alt1if=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_6) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_5) | SDPointAt(t, fragexample_4)) & ( ? loop1loop1 [boolean] loop1loop1loop1 [boolean] loop1loop1loop1alt1if [boolean] : Loop1loop1T(Next(t), st, loop1loop1) & Loop1loop1loop1T(Next(t), st, loop1loop1loop1) & Loop1loop1loop1alt1ifT(Next(t), st, loop1loop1loop1alt1if) & (loop1loop1=T) & (loop1loop1loop1=T) & (loop1loop1loop1alt1if=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_7) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_5) | SDPointAt(t, fragexample_4)) & ( ? loop1loop1 [boolean] loop1loop1loop1 [boolean] loop1loop1loop1alt1then [boolean] : Loop1loop1T(Next(t), st, loop1loop1) & Loop1loop1loop1T(Next(t), st, loop1loop1loop1) & Loop1loop1loop1alt1thenT(Next(t), st, loop1loop1loop1alt1then) & (loop1loop1=T) & (loop1loop1loop1=T) & (loop1loop1loop1alt1then=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_7) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_7) | SDPointAt(t, fragexample_6)) & ( ? loop1loop1loop1 [boolean] loop1loop1loop1alt1then [boolean] : Loop1loop1loop1T(Next(t), st, loop1loop1loop1) & Loop1loop1loop1alt1thenT(Next(t), st, loop1loop1loop1alt1then) & (loop1loop1loop1=T) & (loop1loop1loop1alt1then=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_7) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_8) & ( ? loop1loop1loop2 [boolean] loop1loop1 [boolean] loop1loop1loop1 [boolean] loop1loop1loop1alt1then [boolean] : Loop1loop1loop2T(Next(t), st, loop1loop1loop2) & Loop1loop1T(Next(t), st, loop1loop1) & Loop1loop1loop1T(Next(t), st, loop1loop1loop1) & Loop1loop1loop1alt1thenT(Next(t), st, loop1loop1loop1alt1then) & ~(loop1loop1loop2=T) & (loop1loop1=T) & (loop1loop1loop1=T) & (loop1loop1loop1alt1then=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_8) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_7) | SDPointAt(t, fragexample_6)) & ( ? loop1loop1loop2 [boolean] loop1loop1loop1 [boolean] : Loop1loop1loop2T(Next(t), st, loop1loop1loop2) & Loop1loop1loop1T(Next(t), st, loop1loop1loop1) & (loop1loop1loop2=T) & ~(loop1loop1loop1=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_8) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_5) | SDPointAt(t, fragexample_4)) & ( ? loop1loop1 [boolean] loop1loop1loop1 [boolean] loop1loop1loop2 [boolean] : Loop1loop1T(Next(t), st, loop1loop1) & Loop1loop1loop1T(Next(t), st, loop1loop1loop1) & Loop1loop1loop2T(Next(t), st, loop1loop1loop2) & (loop1loop1=T) & ~(loop1loop1loop1=T) & (loop1loop1loop2=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_8) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_8) & ( ? loop1loop1loop2 [boolean] : Loop1loop1loop2T(Next(t), st, loop1loop1loop2) & (loop1loop1loop2=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_9) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_7) | SDPointAt(t, fragexample_6)) & ( ? loop1loop1loop1 [boolean] loop1loop1loop2 [boolean] loop1loop1 [boolean] : Loop1loop1loop1T(Next(t), st, loop1loop1loop1) & Loop1loop1loop2T(Next(t), st, loop1loop1loop2) & Loop1loop1T(Next(t), st, loop1loop1) & ~(loop1loop1loop1=T) & ~(loop1loop1loop2=T) & ~(loop1loop1=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_9) <- (CurrentStackLevel(t) = st) & SDPointAt(t, fragexample_8) & ( ? loop1loop1loop2 [boolean] loop1loop1 [boolean] : Loop1loop1loop2T(Next(t), st, loop1loop1loop2) & Loop1loop1T(Next(t), st, loop1loop1) & ~(loop1loop1loop2=T) & ~(loop1loop1=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_9) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_5) | SDPointAt(t, fragexample_4)) & ( ? loop1loop1 [boolean] : Loop1loop1T(Next(t), st, loop1loop1) & ~(loop1loop1=T)).
        ! t [Time] st [StackLevel] : C_SDPointAt(Next(t), fragexample_10) <- (CurrentStackLevel(t) = st) & (SDPointAt(t, fragexample_9) | SDPointAt(t, fragexample_1)) & ( ? loop1 [boolean] : Loop1T(Next(t), st, loop1) & ~(loop1=T)).
        
        ! t [Time] s [SDPoint] : C_SDPointAt(Next(t), s) <- ReturnPoint(t, CurrentStackLevel(t), s) & (SDPointAt(t, fragexample_10) | SDPointAt(t, fragexample_2)).
        ! t [Time] st [StackLevel] sd [SDPoint] : Cn_ReturnPoint(Next(t), st, sd) <- (CurrentStackLevel(t) = st) & ReturnPoint(t, st, sd) & (SDPointAt(t, fragexample_2) | SDPointAt(t, fragexample_10)).
        
    }
    {
            ! s [SDPoint] : SDPointAt(Start, s) <- I_SDPointAt(s).
            ! t [Time] s [SDPoint] : SDPointAt(Next(t), s) <- C_SDPointAt(Next(t), s).
            ! t [Time] s [SDPoint] : SDPointAt(Next(t), s) <- SDPointAt(t, s) & ~(? s1 [SDPoint] : C_SDPointAt(Next(t), s1)).
            
            ! st [StackLevel] : CurrentStackLevel(Start) = st <- I_CurrentStackLevel = st.
            ! t [Time] st [StackLevel] : CurrentStackLevel(t) = st <- C_CurrentStackLevel(t, st).
            ! t [Time] st [StackLevel] : CurrentStackLevel(Next(t)) = st <- CurrentStackLevel(t) = st & ~(? st1 [StackLevel] : C_CurrentStackLevel(Next(t), st1)).
            
            ! st [StackLevel] sd [SDPoint] : ReturnPoint(Start, st, sd) <- I_ReturnPoint(st, sd).
            ! t [Time] st [StackLevel] sd [SDPoint] : ReturnPoint(t, st, sd) <- C_ReturnPoint(t, st, sd).
            ! t [Time] st [StackLevel] sd [SDPoint] : ReturnPoint(Next(t), st, sd) <- ReturnPoint(t, st, sd) & ~Cn_ReturnPoint(Next(t), st, sd).
            
            ! x [boolean] st [StackLevel] : Loop1alt1ifT(Start, st, x) <- I_Loop1alt1ifT(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1alt1ifT(t, st, x) <- C_Loop1alt1ifT(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1alt1ifT(Next(t), st, x) <- Loop1alt1ifT(t, st, x) & ~( ? x1 [boolean] : C_Loop1alt1ifT(Next(t), st, x1) & ~(x = x1)).
            
            ! x [A] st [StackLevel] : AT(Start, st, x) <- I_AT(st, x).
            ! t [Time] st [StackLevel] x [A] : AT(t, st, x) <- C_AT(t, st, x).
            ! t [Time] st [StackLevel] x [A] : AT(Next(t), st, x) <- AT(t, st, x) & ~( ? x1 [A] : C_AT(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Loop1loop1loop1alt1ifT(Start, st, x) <- I_Loop1loop1loop1alt1ifT(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1loop1loop1alt1ifT(t, st, x) <- C_Loop1loop1loop1alt1ifT(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1loop1loop1alt1ifT(Next(t), st, x) <- Loop1loop1loop1alt1ifT(t, st, x) & ~( ? x1 [boolean] : C_Loop1loop1loop1alt1ifT(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Loop1loop1T(Start, st, x) <- I_Loop1loop1T(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1loop1T(t, st, x) <- C_Loop1loop1T(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1loop1T(Next(t), st, x) <- Loop1loop1T(t, st, x) & ~( ? x1 [boolean] : C_Loop1loop1T(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Loop1T(Start, st, x) <- I_Loop1T(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1T(t, st, x) <- C_Loop1T(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1T(Next(t), st, x) <- Loop1T(t, st, x) & ~( ? x1 [boolean] : C_Loop1T(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Loop1loop1loop1alt1thenT(Start, st, x) <- I_Loop1loop1loop1alt1thenT(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1loop1loop1alt1thenT(t, st, x) <- C_Loop1loop1loop1alt1thenT(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1loop1loop1alt1thenT(Next(t), st, x) <- Loop1loop1loop1alt1thenT(t, st, x) & ~( ? x1 [boolean] : C_Loop1loop1loop1alt1thenT(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Loop1loop1loop1T(Start, st, x) <- I_Loop1loop1loop1T(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1loop1loop1T(t, st, x) <- C_Loop1loop1loop1T(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1loop1loop1T(Next(t), st, x) <- Loop1loop1loop1T(t, st, x) & ~( ? x1 [boolean] : C_Loop1loop1loop1T(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Loop1alt1thenT(Start, st, x) <- I_Loop1alt1thenT(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1alt1thenT(t, st, x) <- C_Loop1alt1thenT(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1alt1thenT(Next(t), st, x) <- Loop1alt1thenT(t, st, x) & ~( ? x1 [boolean] : C_Loop1alt1thenT(Next(t), st, x1) & ~(x = x1)).
            
            ! x [boolean] st [StackLevel] : Loop1loop1loop2T(Start, st, x) <- I_Loop1loop1loop2T(st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1loop1loop2T(t, st, x) <- C_Loop1loop1loop2T(t, st, x).
            ! t [Time] st [StackLevel] x [boolean] : Loop1loop1loop2T(Next(t), st, x) <- Loop1loop1loop2T(t, st, x) & ~( ? x1 [boolean] : C_Loop1loop1loop2T(Next(t), st, x1) & ~(x = x1)).
            
            
    }
    {
    }


}
structure S:V {
    Time = { 0..20 }
    Start = 0
    Next = { 0->1; 1->2; 2->3; 3->4; 4->5; 5->6; 6->7; 7->8; 8->9; 9->10; 10->11; 11->12; 12->13; 13->14; 14->15; 15->16; 16->17; 17->18; 18->19; 19->20 }

    I_CurrentStackLevel = 1

    LimitedInt = { -5..5 }
    RandomInt = { 0,4; 1,-5; 2,-4; 3,-5; 4,2; 5,5; 6,5; 7,1; 8,-3; 9,3; 10,-2; 11,0; 12,-4; 13,-5; 14,2; 15,2; 16,-5; 17,2; 18,0; 19,-3; 20,-2 }
    LimitedFloat = { 0.0; 0.5; -0.5; 0.5; -0.5; 0.5; -0.5; 0.5; -0.5}
    LimitedString = { "AiwT6OBKM6NMYaYWdmxe"; "3E6WnrUjnU6xkAAr0Am7"; "SN6svvbSxlOtRXGIow2t"; "loop1alt1if"; "a"; "loop1loop1loop1alt1if"; "loop1loop1"; "loop1"; "loop1loop1loop1alt1then"; "loop1loop1loop1"; "loop1alt1then"; "loop1loop1loop2"} 
    
    A = { A1; A2; A3}
    NextSD = { fragexample_1->fragexample_2; fragexample_2->fragexample_3; fragexample_3->fragexample_4; fragexample_4->fragexample_5; fragexample_5->fragexample_6; fragexample_6->fragexample_7; fragexample_7->fragexample_8; fragexample_8->fragexample_9; fragexample_9->fragexample_10; fragexample_10->fragexample_1; fragexample_1->fragexample_2 }
    flipBool = { T->F;F->T}
}
procedure main() {
    print(modelexpand(T,S)[1])
}